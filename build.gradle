buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = mod_base_package
archivesBaseName = "${mod_id}" + "-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--username', 'Dev####'
            //args '--username', 'kinaria3324@gmail.com'
            //args '--password', 'LOLlol123!@#'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'buffabilities', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "${mod_id}.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

afterEvaluate {
    // So we can hotswap mixins
    def mixinDep = dependencies.create("org.spongepowered:mixin:0.8.2")
    def mixinFile = configurations.detachedConfiguration(mixinDep).resolve().toList()[0]
    minecraft.runs.all {
        jvmArgs "-javaagent:${mixinFile}"
    }
}

// Prevent Mixin annotation processor from getting into IntelliJ's annotation processor settings
// This allows 'Settings > Build, Execution, and Deployment > Build Tools > Gradle > Build and run using' set to IntelliJ to work correctly
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}


repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://maven.melanx.de" }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        name = '100Media'
        url = 'https://maven.100media.dev/'
        credentials {
            username = project.getProperty('hm_maven_username')
            password = project.getProperty('hm_maven_password')
        }
        authentication {
            basic(BasicAuthentication)
        }
    }
}
configurations {
    implementation.extendsFrom shadow
}
dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta', "${mod_id}.mixins.json".toString()]

def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_version: mod_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}
jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
                "Specification-Title": "${mod_id}",
                "Specification-Vendor": "examplemodsareus",
                "Specification-Version": "${mod_version}", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


def relocateTargets = ['dev._100media.capabilitysyncer']
shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shadow]
    relocateTargets.forEach {
        relocate it, "${project.group}.relocated.$it"
    }
    finalizedBy 'reobfShadowJar'
}

artifacts {
    shadowJar
}

reobf {
    shadowJar {}
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
